{"version":3,"file":"background.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://auto-translate-gpt-extension/./src/background.ts"],"sourcesContent":["\"use strict\";\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Extension installed and running.');\n});\nconst basePrompt = \"You will be given an array of text to translate into english. Output will be in the form of an ordered json array with key 'messages'\";\nlet runningTotalRequest = 0;\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.action === \"translate\") {\n        translateText(request.text).then(translatedText => {\n            sendResponse({ translatedText: translatedText });\n        }).catch(error => {\n            sendResponse(request.text);\n        });\n        return true; // Indicates an asynchronous response is expected\n    }\n});\nasync function translateText(textArray) {\n    const { model, apiKey } = await new Promise((resolve) => {\n        chrome.storage.sync.get(['model', 'apiKey'], (items) => {\n            resolve(items);\n        });\n    });\n    if (!model || !apiKey) {\n        console.error('Model or API key not set');\n        return JSON.stringify({ messages: textArray });\n    }\n    if (textArray.length === 0) {\n        return JSON.stringify({ messages: textArray });\n    }\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n            model: model, // Specify the model\n            messages: [\n                { role: \"system\", content: basePrompt },\n                { role: \"user\", content: JSON.stringify(textArray) }\n            ],\n            response_format: { \"type\": \"json_object\" }\n        })\n    });\n    const data = await response.json();\n    console.log(JSON.stringify(data));\n    console.log(\"Total requests made: \", runningTotalRequest++);\n    const translatedText = data.choices[0].message.content.trim();\n    try {\n        const parsedTranslation = JSON.parse(translatedText);\n        if (parsedTranslation.messages && Array.isArray(parsedTranslation.messages)) {\n            return parsedTranslation.messages;\n        }\n        else {\n            console.error('Invalid response format from the API');\n            return textArray;\n        }\n    }\n    catch (error) {\n        console.error('Error parsing the translated text:', error);\n        return JSON.stringify({ messages: textArray });\n    }\n}\n"],"names":[],"sourceRoot":""}